---
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for AWS CodeCommit Repository and S3 Bucket

Parameters:
  ProjectName:
    Description: The name of the project to use for the created resources. Must be unique.
    Type: String
  InitialEmail:
    Type: String
    Description: Email address to notify when approval for Terraform Apply is needed
  BuildspecPlanUrl:
    Type: String
    Default: 'https://raw.githubusercontent.com/leonbittner/easytf/main/assets/buildspec-plan.yaml'
    Description: URL to download the buildspec-plan.yml file from.
  BuildspecApplyUrl:
    Type: String
    Default: 'https://raw.githubusercontent.com/leonbittner/easytf/main/assets/buildspec-apply.yaml'
    Description: URL to download the buildspec-apply.yml file from.

Resources:
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: 
          Fn::Sub:
            - "${ProjectName}-infrastructure-repository"
            - ProjectName: !Ref ProjectName
      RepositoryDescription: Easytf Infrastructure Repository
      Code:
        BranchName: main
        S3: 
          Bucket: !Ref S3Bucket
          Key: tmp_codecommit.zip
    DependsOn: GitInitCustomResource

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName:
        Fn::Sub:
          - "${ProjectName}-terraform-backend"
          - ProjectName: !Ref ProjectName

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: lambda-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource: '*'

  GitInitLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import zipfile
          import os
          import cfnresponse
          from io import BytesIO
          from urllib.request import urlopen

          def handler(event, context):
            if event['RequestType'] == 'Delete':
              responseData = {
                  'statusCode': 200,
                  'body': json.dumps('Success')
                }
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return responseData

            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              try:
                s3 = boto3.client('s3')

                # URLs to download buildspec files from
                files_to_download = {
                    "buildspec-plan.yml": os.environ['BUILDSPEC_PLAN_URL'],
                    "buildspec-apply.yml": os.environ['BUILDSPEC_APPLY_URL']
                }

                # Create a new zip file in memory
                zip_buffer = BytesIO()
                with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
                  for file_name, file_url in files_to_download.items():
                    response = urlopen(file_url)
                    zip_file.writestr(file_name, response.read())

                  # Add backend.tf file to tf directory inside zip
                  backend_tf_content = f'''
                  terraform {{
                    backend "s3" {{
                      bucket = "{os.environ['BACKEND_BUCKET']}"
                      key    = "tfbackend/backend"
                      region = "{os.environ['AWS_REGION_CODE']}"
                    }}
                  }}
                  '''
                  zip_file.writestr('tf/backend.tf', backend_tf_content)

                  # Add main.tf file to tf directory inside zip
                  main_tf_content = "# Write Terraform code here"
                  zip_file.writestr('tf/main.tf', main_tf_content)

                # Upload the zip file to S3
                s3.put_object(Bucket=os.environ['BACKEND_BUCKET'], Key="tmp_codecommit.zip", Body=zip_buffer.getvalue())
                
                responseData = {
                  'statusCode': 201,
                  'body': json.dumps('Success')
                }
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return responseData

              except Exception as e:
                print("Error occurred: ", e)
                return {
                  'statusCode': 500,
                  'body': json.dumps('An error occurred while processing the request.')
                }
      Runtime: python3.8
      Timeout: 15
      Environment:
        Variables:
          BACKEND_BUCKET: !Ref S3Bucket
          BUILDSPEC_PLAN_URL: !Ref BuildspecPlanUrl
          BUILDSPEC_APPLY_URL: !Ref BuildspecApplyUrl
          AWS_REGION_CODE: !Ref "AWS::Region"
    DependsOn: S3Bucket

  GitInitCustomResource:
      Type: 'Custom::GitInitCustomResource'
      Properties:
        ServiceToken: !GetAtt GitInitLambda.Arn
        BucketName: !Ref S3Bucket

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-service
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: "VisualEditor0"
                Effect: "Allow"
                Action:
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:BatchGetCommits"
                  - "codecommit:GetRepository"
                  - "codecommit:GitPull"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:CancelUploadArchive"
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ProjectName}-infrastructure-repository"
              - Sid: "VisualEditor2"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketVersioning"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${ProjectName}-terraform-backend/*"
              - Sid: "VisualEditor3"
                Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:StopBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${ProjectName}-plan"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${ProjectName}-apply"
              - Sid: "VisualEditor4"
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProjectName}-manual-approval-topic" 

  ManualApprovalNotificationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Sub "${ProjectName}-manual-approval-topic" 

  ManualApprovalNotificationSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !Ref InitialEmail
      Protocol: email
      TopicArn: !Ref ManualApprovalNotificationTopic

  AppPipeline: 
    Type: AWS::CodePipeline::Pipeline 
    DependsOn: 
      - CodeBuildProjectTerraformPlan
      - CodeBuildProjectTerraformApply
      - CodePipelineServiceRole
    Properties: 
      Name: !Sub "${ProjectName}-infrastructure-pipeline"
      RoleArn:
        !GetAtt CodePipelineServiceRole.Arn
      Stages: 
        - 
          Name: Source 
          Actions: 
            - 
              Name: SourceAction
              ActionTypeId: 
                Category: Source 
                Owner: AWS 
                Version: 1 
                Provider: CodeCommit 
              OutputArtifacts: 
                - 
                  Name: SourceOutput 
              Configuration: 
                RepositoryName: 
                  !GetAtt CodeCommitRepository.Name
                BranchName: main
                PollForSourceChanges: false 
              RunOrder: 1 
        - 
          Name: Plan 
          Actions: 
            - 
              Name: Terraform-Plan
              InputArtifacts: 
                -
                  Name: SourceOutput 
              Namespace: BuildVariables
              ActionTypeId: 
                Category: Build 
                Owner: AWS 
                Version: 1 
                Provider: CodeBuild
              OutputArtifacts: 
                - 
                  Name: TerraformPlanFile 
              Configuration: 
                ProjectName: !Ref CodeBuildProjectTerraformPlan
                PrimarySource: SourceOutput
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "PIPELINE_EXECUTION_ID",
                      "value": "#{codepipeline.PipelineExecutionId}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "PIPELINE_NAME",
                      "value": "${ProjectName}-infrastructure-pipeline",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "ARTIFACTS_BUCKET",
                      "value": "${S3Bucket}",
                      "type": "PLAINTEXT"
                    }
                  ]
              RunOrder: 1 
        - 
          Name: Manual-Approval
          Actions: 
            - 
              Name: AWS-Admin-Approval
              ActionTypeId: 
                Category: Approval 
                Owner: AWS 
                Version: 1
                Provider: Manual 
              Configuration: 
                ExternalEntityLink: "#{BuildVariables.TF_OUTPUT_URL}"
                NotificationArn: !Ref ManualApprovalNotificationTopic
                CustomData: "Manual approval required. Please check the output of the previous stage." 
              RunOrder: 1 
        - 
          Name: Deploy 
          Actions: 
            - 
              Name: Terraform-Apply
              InputArtifacts: 
                -
                  Name: SourceOutput 
                -
                  Name: TerraformPlanFile
              ActionTypeId: 
                Category: Build 
                Owner: AWS 
                Version: 1 
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectTerraformApply
                PrimarySource: SourceOutput
                EnvironmentVariables: |
                  [
                    {
                      "name": "PIPELINE_EXECUTION_ID",
                      "value": "#{codepipeline.PipelineExecutionId}",
                      "type": "PLAINTEXT"
                    }
                  ]
              RunOrder: 1
      ArtifactStore: 
        Type: S3 
        Location: !Ref S3Bucket
  PipelineEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: eb-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ] 
  PipelineEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Sub '${ProjectName}-infrastructure-repository' ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
          RoleArn: !GetAtt PipelineEventRole.Arn
          Id: codepipeline-AppPipeline
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: codebuild-service
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: "VisualEditor2"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketVersioning"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${ProjectName}-terraform-backend/*"
              - Sid: "Statement1"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-plan:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-apply:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildProjectTerraformPlan:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectName}-plan"
      Description: "Your description here"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/standard:5.0'
        Type: 'LINUX_CONTAINER'
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-plan.yml

  CodeBuildProjectTerraformApply:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectName}-apply"
      Description: "Your description here"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/standard:5.0'
        Type: 'LINUX_CONTAINER'
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-apply.yml

Outputs:
  BucketName:
    Value: !Ref S3Bucket
